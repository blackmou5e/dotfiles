if has("eval")
  let skip_defaults_vim = 1
  let g:loaded_matchparen = 1
endif

" Vi
set autoindent
set noflash
set expandtab
set tabstop=2
set noignorecase
set autowrite
set ruler
set showmode

"-----
set t_vb=

let mapleader=","

set softtabstop=2
set shiftwidth=2
set smartindent
set smarttab

if v:version >= 800
  set nofixendofline
  set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|>
  set foldmethod=manual
  set nofoldenable
endif

match IncSearch '\s\+$'

set textwidth=72

set spc=

set nobackup
set noswapfile
set nowritebackup

set icon

set hlsearch
set incsearch
set linebreak

set shortmess=aoOtTI
set viminfo='20,<1000,s1000
set noshowmatch
set wrapscan
set nowrap
set rnu nu

autocmd FileType * set fo-=t " don't autowrap text with textwidth
autocmd FileType * set fo+=c " autowrap comments
autocmd FileType * set fo-=r " don't autoinsert comment on new line in insert
autocmd FileType * set fo-=o " don't auto-insert commen on O
autocmd FileType * set fo+=q " allow gq formatting comments
autocmd FileType * set fo-=w " dont'use trailing whitespace for paragraph
autocmd FileType * set fo-=a " disable aut-formatting of paragraph changes
autocmd FileType * set fo-=n " don't recognize numered lists
autocmd FileType * set fo+=j " delete comment prefix when joining lines
autocmd FileType * set fo-=2 " don't use the indent of second paragraph line
autocmd FileType * set fo-=v " don't use broken 'vi-compatible-auto-wrapping'
autocmd FileType * set fo-=b " don't use broken 'vi-compatible-auto-wrapping'
autocmd FileType * set fo+=l " long lines not broken in insert mode
autocmd FileType * set fo+=m " multi-byte character line break support
autocmd FileType * set fo+=M " don't add space before or after multi-byte char
autocmd FileType * set fo-=B " don't add space between two multi-byte chars
autocmd FileType * set fo+=1 " don't break a line after a one-letter word

if $PLATFORM == 'mac'
  set backspace=indent,eol,start
endif

set hidden
set history=100

if has("syntax")
  syntax enable
endif

set ttyfast

filetype plugin on

set background=dark

hi SignColumn ctermbg=NONE


au FileType * hi StatusLine ctermfg=black ctermbg=NONE
au FileType * hi StatusLineNC ctermfg=black ctermbg=NONE
au FileType * hi Normal ctermbg=NONE
au FileType * hi Special ctermfg=cyan
au FileType * hi LineNr ctermfg=yellow ctermbg=NONE
au FileType * hi SpecialKey ctermfg=black ctermbg=NONE
au FileType * hi ModeMsg ctermfg=white cterm=NONE ctermbg=NONE
au FileType * hi MoreMsg ctermfg=white ctermbg=NONE
au FileType * hi NonText ctermfg=black ctermbg=NONE
au FileType * hi vimGlobal ctermfg=white ctermbg=NONE
au FileType * hi goComment ctermfg=white ctermbg=NONE
au FileType * hi ErrorMsg ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi Error ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi SpellBad ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi SpellRare ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi Search ctermbg=236 ctermfg=darkred
au FileType * hi vimTodo ctermbg=236 ctermfg=darkred
au FileType * hi Todo ctermbg=236 ctermfg=darkred
au FileType * hi IncSearch ctermbg=236 cterm=NONE ctermfg=darkred
au FileType * hi MatchParen ctermbg=236 ctermfg=darkred
au FileType markdown,pandoc hi Title ctermfg=yellow ctermbg=NONE
au FileType markdown,pandoc hi Operator ctermfg=yellow ctermbg=NONE
au FileType markdown,pandoc set tw=0
au FileType markdown,pandoc set wrap
au FileType yaml hi yamlBlockMappingKey ctermfg=NONE
au FileType yaml set sw=2
au FileType bash set sw=2
au FileType c set sw=8
au FileType markdown,pandoc noremap j gj
au FileType markdown,pandoc noremap k gk
au FileType sh set noet

set cinoptions+=:0

nnoremap confe :e $HOME/.vimrc<CR>
nnoremap confr :source $HOME/.vimrc<CR>

set ruf=%30(%=%#LineNr#%.50F\ [%{strlen(&ft)?&ft:'none'}]\ %l:%c\ %p%%%)

if filereadable(expand("~/.vim/autoload/plug.vim"))
  call plug#begin("~/.local/share/vim/plugins")
  Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
  Plug 'vim-pandoc/vim-pandoc'
  Plug 'dense-analysis/ale'
  call plug#end()

  let g:ale_sign_error = 'â˜ '
  let g:ale_sign_warning = 'ðŸ™„'
  let g:ale_linters = {'go': ['gometalinter', 'gofmt','gobuild']}

  " pandoc
  let g:pandoc#formatting#mode = 'h' " A'
  let g:pandoc#formatting#textwidth = 72

  " golang
  let g:go_fmt_fail_silently = 0
  let g:go_fmt_command = 'goimports'
  let g:go_fmt_autosave = 1
  let g:go_gopls_enabled = 1
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_function_calls = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_variable_declarations = 1
  let g:go_highlight_variable_assignments = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_diagnostic_errors = 1
  let g:go_highlight_diagnostic_warnings = 1
  "let g:go_auto_type_info = 1 " forces 'Press ENTER' too much
  let g:go_auto_sameids = 0
  "    let g:go_metalinter_command='golangci-lint'
  "    let g:go_metalinter_command='golint'
  "    let g:go_metalinter_autosave=1
  set updatetime=100
  "let g:go_gopls_analyses = { 'composites' : v:false }
  au FileType go nmap <leader>m ilog.Print("made")<CR><ESC>
  au FileType go nmap <leader>n iif err != nil {return err}<CR><ESC>
else
  autocmd vimleavepre *.go !gofmt -w % " backup if fatih fails
endif

augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

if has("eval")
  fun! s:Perltidy()
    let l:pos = getcurpos()
    silent execute '%!perltidy -i=2'
    call setpos('.', l:pos)
  endfun
"autocmd FileType perl autocmd BufWritePre <buffer> call s:Perltidy()
endif

" format shell on save
if has("eval") " vim-tiny detection
" TODO check for shfmt and shellcheck before defining
" FIXME stop from blowing away file when there is shell error
fun! s:FormatShell()
  let l:pos = getcurpos()
  "silent execute '%!shfmt' " FIXME: bug report to shfmt
  call setpos('.', l:pos)
endfun
autocmd FileType sh autocmd BufWritePre <buffer> call s:FormatShell()
endif

" Make Y consistent with D and C (yank till end)
map Y y$


set wildmenu

nnoremap <C-L> :nohl<CR><C-L>

set omnifunc=syntaxcomplete#Complete

" force some files to be specific file type
au bufnewfile,bufRead user-data set ft=yaml
au bufnewfile,bufRead meta-data set ft=yaml
au bufnewfile,bufRead .goreleaser set ft=yaml
au bufnewfile,bufRead *.ddl set ft=sql
au bufnewfile,bufRead *.bash* set ft=bash
au bufnewfile,bufRead *.gotmpl set ft=go
au bufnewfile,bufRead *.profile set filetype=sh
au bufnewfile,bufRead *.crontab set filetype=crontab
au bufnewfile,bufRead *ssh/config set filetype=sshconfig
au bufnewfile,bufRead .dockerignore set filetype=gitignore
au bufnewfile,bufRead *gitconfig set filetype=gitconfig
au bufnewfile,bufRead *.go set spell spellcapcheck=0
au bufnewfile,bufRead commands.yaml set spell
au bufnewfile,bufRead *.txt set spell

"fix bork bash detection
if has("eval")  " vim-tiny detection
fun! s:DetectBash()
    if getline(1) == '#!/usr/bin/bash' || getline(1) == '#!/bin/bash'
        set ft=bash
        set shiftwidth=2
    endif
endfun
autocmd BufNewFile,BufRead * call s:DetectBash()
endif

" displays all the syntax rules for current position, useful
" when writing vimscript syntax plugins
if has("syntax")
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
endif


" start at last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"au BufWritePost ~/.vimrc so ~/.vimrc

" functions keys
map <F1> :set number!<CR> :set relativenumber!<CR>
nmap <F2> :call <SID>SynStack()<CR>
set pastetoggle=<F3>
map <F4> :set list!<CR>
map <F5> :set cursorline!<CR>
map <F7> :set spell!<CR>
map <F12> :set fdm=indent<CR>

nmap <leader>2 :set paste<CR>i
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>
nnoremap <up> <C-a>
nnoremap <down> <C-x>

